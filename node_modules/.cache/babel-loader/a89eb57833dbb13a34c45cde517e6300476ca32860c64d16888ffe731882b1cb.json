{"ast":null,"code":"//  var myChart = echarts.init(document.querySelector('demo'));\n//  var option = {\n//             title: {\n//                 text: 'Stacked Line'\n//             },\n//             tooltip: {\n//                 trigger: 'axis'\n//             },\n//             legend: {\n//                 data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n//             },\n//             grid: {\n//                 left: '3%',\n//                 right: '4%',\n//                 bottom: '3%',\n//                 containLabel: true\n//             },\n//             toolbox: {\n//                 feature: {\n//                     saveAsImage: {}\n//                 }\n//             },\n//             xAxis: {\n//                 type: 'category',\n//                 boundaryGap: false,\n//                 data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n//             },\n//             yAxis: {\n//                 type: 'value'\n//             },\n//             series: [\n//                 {\n//                     name: 'Email',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [120, 132, 101, 134, 90, 230, 210]\n//                 },\n//                 {\n//                     name: 'Union Ads',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [220, 182, 191, 234, 290, 330, 310]\n//                 },\n//                 {\n//                     name: 'Video Ads',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [150, 232, 201, 154, 190, 330, 410]\n//                 },\n//                 {\n//                     name: 'Direct',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [320, 332, 301, 334, 390, 330, 320]\n//                 },\n//                 {\n//                     name: 'Search Engine',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [820, 932, 901, 934, 1290, 1330, 1320]\n//                 }\n//             ]\n//         };\n// myChart.setOption(option);\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: []\n    };\n  },\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || [];\n    });\n  }\n};","map":{"version":3,"names":["name","data","user","JSON","parse","localStorage","getItem","notices","created","$request","get","then","res"],"sources":["src/views/manager/Home.vue"],"sourcesContent":["<template>\n\n\n  <div>\n    <div class=\"card\" style=\"padding: 15px\">\n      您好，{{ user?.name }}！欢迎使用本系统\n    </div>\n\n    <div style=\"display: flex; margin: 10px 0\">\n      <div style=\"width: 50%;\" class=\"card\">\n        <div style=\"margin-bottom: 30px; font-size: 20px; font-weight: bold\">公告列表</div>\n        <div >\n          <el-timeline  reverse slot=\"reference\">\n            <el-timeline-item v-for=\"item in notices\" :key=\"item.id\" :timestamp=\"item.time\">\n              <el-popover\n                  placement=\"right\"\n                  width=\"200\"\n                  trigger=\"hover\"\n                  :content=\"item.content\">\n                <span slot=\"reference\">{{ item.title }}</span>\n              </el-popover>\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n    </div>\n    <div id=\"demo\" class=\"width: 500px;height: 500px;\">llll\n     </div>\n  </div>\n \n\n\n</template>\n<script>\n \n//  var myChart = echarts.init(document.querySelector('demo'));\n//  var option = {\n//             title: {\n//                 text: 'Stacked Line'\n//             },\n//             tooltip: {\n//                 trigger: 'axis'\n//             },\n//             legend: {\n//                 data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']\n//             },\n//             grid: {\n//                 left: '3%',\n//                 right: '4%',\n//                 bottom: '3%',\n//                 containLabel: true\n//             },\n//             toolbox: {\n//                 feature: {\n//                     saveAsImage: {}\n//                 }\n//             },\n//             xAxis: {\n//                 type: 'category',\n//                 boundaryGap: false,\n//                 data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n//             },\n//             yAxis: {\n//                 type: 'value'\n//             },\n//             series: [\n//                 {\n//                     name: 'Email',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [120, 132, 101, 134, 90, 230, 210]\n//                 },\n//                 {\n//                     name: 'Union Ads',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [220, 182, 191, 234, 290, 330, 310]\n//                 },\n//                 {\n//                     name: 'Video Ads',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [150, 232, 201, 154, 190, 330, 410]\n//                 },\n//                 {\n//                     name: 'Direct',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [320, 332, 301, 334, 390, 330, 320]\n//                 },\n//                 {\n//                     name: 'Search Engine',\n//                     type: 'line',\n//                     stack: 'Total',\n//                     data: [820, 932, 901, 934, 1290, 1330, 1320]\n//                 }\n//             ]\n//         };\n// myChart.setOption(option);\n\nexport default {\n  name: 'Home',\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      notices: []\n    }\n  },\n  created() {\n    this.$request.get('/notice/selectAll').then(res => {\n      this.notices = res.data || []\n    })\n  }\n}\n\n\n\n</script>\n"],"mappings":"AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,QAAA,CAAAC,GAAA,sBAAAC,IAAA,CAAAC,GAAA;MACA,KAAAL,OAAA,GAAAK,GAAA,CAAAX,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}